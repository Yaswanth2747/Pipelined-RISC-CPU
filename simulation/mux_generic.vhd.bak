library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity mux_generic is
    generic (
        N : integer := 4  -- Default value for number of inputs (you can change this)
    );
    port (
        sel : in std_logic_vector(log2(N)-1 downto 0);  -- Selector input
        data_in : in std_logic_vector(N-1 downto 0);     -- Data inputs
        mux_out : out std_logic                           -- Output
    );
end entity mux_generic;

architecture Behavioral of mux_generic is
    -- Function to calculate log2 of a number (needed for selecting the selector width)
    function log2(val : integer) return integer is
        variable result : integer := 0;
    begin
        while (2**result < val) loop
            result := result + 1;
        end loop;
        return result;
    end function;
begin
    -- Multiplexer logic: Selects one of the inputs based on `sel` value
    process(sel, data_in)
    begin
        case to_integer(unsigned(sel)) is
            when 0 => mux_out <= data_in(0);
            when 1 => mux_out <= data_in(1);
            when 2 => mux_out <= data_in(2);
            when 3 => mux_out <= data_in(3);
            -- Add additional cases for more inputs (this will expand as N increases)
            when others => mux_out <= '0';  -- Default case
        end case;
    end process;
end architecture Behavioral;
